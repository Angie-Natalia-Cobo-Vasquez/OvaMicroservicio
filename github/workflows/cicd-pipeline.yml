name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  test:
    if: false
    runs-on: ubuntu-latest

    permissions:
      contents: read
      checks: write

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: '23'
          distribution: 'adopt'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Install dependencies
        run: mvn install -DskipTests

      - name: Run Tests with Jacoco
        env:
          TESTCONTAINERS_RYUK_DISABLED: "true"
          DOCKER_HOST: tcp://localhost:2375
        run: mvn test jacoco:report

      - name: Upload Test and Coverage Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            target/surefire-reports
            target/site/jacoco/jacoco.xml

      - name: Display Test Results
        uses: dorny/test-reporter@v1
        with:
          name: Test Results
          path: target/surefire-reports/*.xml
          reporter: java-junit

  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: '23'
          distribution: 'adopt'

      - name: Build JAR
        run: mvn clean package -DskipTests

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          docker build -t angiecobo/ova-service:latest .
          docker push angiecobo/ova-service:latest

  deploy:
    if: true
    needs: build-and-publish
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verify compose.yaml Exists
        run: |
          if [ ! -f compose.yaml ]; then
            echo "Error: compose.yaml not found!"
            exit 1
          fi

      - name: Create SSH Key File
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Add Host to known_hosts
        run: |
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Create directory on EC2
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            mkdir -p ~/app-ova-microservicio

      - name: Copy docker-compose.yml to EC2
        run: |
          scp -i ~/.ssh/id_rsa ./compose.yaml ubuntu@${{ secrets.EC2_HOST }}:~/app-ova-microservicio/compose.yaml

      - name: Run Docker Compose on EC2
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          command_timeout: 10m
          script: |
            cd ~/app-ova-microservicio
            sudo docker compose pull
            sudo docker compose up -d
